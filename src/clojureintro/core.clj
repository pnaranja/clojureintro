(ns clojureintro.core)

(load-file "src/clojureintro/video1.clj")

(println "\nBaking Cookies!\n")
(start-over)
(grab :egg)
(squeeze)
(add-to-bowl)
(grab :butter)
(add-to-bowl)
(grab :cup)
(scoop :flour)
(add-to-bowl)
(scoop :sugar)
(add-to-bowl)
(release)
(mix)
(pour-into-pan)
(bake-pan 30)
(cool-pan)
(status)

(println "\nBaking a Cake!\n")
(start-over)
(grab :cup)
(scoop :flour)
(add-to-bowl)
(scoop :flour)
(add-to-bowl)
(release)
(grab :egg)
(squeeze)
(add-to-bowl)
(grab :egg)
(squeeze)
(add-to-bowl)
(grab :cup)
(scoop :milk)
(add-to-bowl)
(release)
(grab :cup)
(scoop :sugar)
(add-to-bowl)
(release)
(mix)
(pour-into-pan)
(bake-pan 25)
(cool-pan)
(status)


(println "\nBaking a Cake again!\n")
(defn add-egg [] (grab :egg) (squeeze) (add-to-bowl))
(defn add-sugar [] (grab :cup) (scoop :sugar) (add-to-bowl) (release))
(defn add-flour [] (grab :cup) (scoop :flour) (add-to-bowl) (release))
(defn add-milk [] (grab :cup) (scoop :milk) (add-to-bowl) (release))
(defn add-butter [] (grab :butter) (add-to-bowl))
(start-over)
(add-flour)
(add-flour)
(add-egg)
(add-egg)
(add-milk)
(add-sugar)
(release)
(mix)
(pour-into-pan)
(bake-pan 25)
(cool-pan)
(status)

(println "\nBaking a Cake - 3rd time\n")
(defn add2 [ingredient]
  (cond 
    (= ingredient :egg) (add-egg)
    (= ingredient :sugar) (add-sugar)
    (= ingredient :flour) (add-flour)
    (= ingredient :milk) (add-milk)
    (= ingredient :butter) (add-butter)
    :else (do (println "Unknown ingredient:" ingredient) :error)))

(start-over)
(add2 :flour)
(add2 :flour)
(add2 :egg)
(add2 :egg)
(add2 :milk)
(add2 :sugar)
(release)
(mix)
(pour-into-pan)
(bake-pan 25)
(cool-pan)
(status)

(defn scooped? [ingredient]
  ((complement not-any?) #(= ingredient %) (list :sugar :flour :milk )))

(defn squeezed? [ingredient] (= ingredient :egg))
(defn simple? [ingredient] (= ingredient :butter))

(defn cannot-action [ingredient action] (println "Sorry, cannot" action ingredient))

(defn add-scooped [ingredient] (if (scooped? ingredient) 
                                 (do (grab ingredient) (scoop ingredient) (add-to-bowl) (release)) 
                                 (do (cannot-action ingredient "scoop") :error)))

(defn add-sequeezed [ingredient] (if (squeezed? ingredient) 
                                  (do (grab ingredient) (squeeze) (add-to-bowl)) 
                                  (do (cannot-action ingredient "squeeze") :error)))

(defn add-simple [ingredient] (if (simple? ingredient) 
                                (do (grab ingredient) (add-to-bowl)) 
                                (cannot-action ingredient "add")))

(defn add [ingredient]
  (cond
    (scooped? ingredient) (add-scooped ingredient)
    (squeezed? ingredient) (add-sequeezed ingredient)
    (simple? ingredient) (add-simple ingredient)
    :else
    (do (println "I do not have" ingredient) :error))
  )

(status)
